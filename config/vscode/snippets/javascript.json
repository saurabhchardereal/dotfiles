{
  "For-Each Loop": {
    "prefix": "fore",
    "body": [
      "${1:array}.forEach(${2:element} => {",
      "\t$TM_SELECTED_TEXT$0",
      "});"
    ],
    "description": "For-Each Loop"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\tif (Object.hasOwn(${2:object}, ${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$TM_SELECTED_TEXT$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": [
      "for (const ${1:iterator} of ${2:object}) {",
      "\t$TM_SELECTED_TEXT$0",
      "}"
    ],
    "description": "For-Of Loop"
  },
  "Function Statement": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:params}) {", "\t$TM_SELECTED_TEXT$0", "}"],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$TM_SELECTED_TEXT$0", "}"],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "\t$TM_SELECTED_TEXT$0",
      "} else {",
      "\t",
      "}"
    ],
    "description": "If-Else Statement"
  },
  "Arrow Function": {
    "prefix": "arrow",
    "body": ["const ${1:name} = (${2:arg}) => { $0 };"],
    "description": "Arrow Function"
  },
  "New Statement": {
    "prefix": "new",
    "body": ["const ${1:name} = new ${2:type}(${3:arguments});$0"],
    "description": "New Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$TM_SELECTED_TEXT$0", "}"],
    "description": "While Statement"
  },
  "Do-While Statement": {
    "prefix": "dowhile",
    "body": ["do {", "\t$TM_SELECTED_TEXT$0", "} while (${1:condition});"],
    "description": "Do-While Statement"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "\t$TM_SELECTED_TEXT$0",
      "} catch (${1:error}) {",
      "\t",
      "}"
    ],
    "description": "Try-Catch Statement"
  },
  "Set Timeout Function": {
    "prefix": "settimeout",
    "body": [
      "setTimeout(() => {",
      "\t$TM_SELECTED_TEXT$0",
      "}, ${1:timeout});"
    ],
    "description": "Set Timeout Function"
  },
  "Set Interval Function": {
    "prefix": "setinterval",
    "body": [
      "setInterval(() => {",
      "\t$TM_SELECTED_TEXT$0",
      "}, ${1:interval});"
    ],
    "description": "Set Interval Function"
  },
  "Log to the console": {
    "prefix": "cl",
    "body": ["console.log($TM_SELECTED_TEXT$1);$0"],
    "description": "Log to the console"
  },
  "Log warning to console": {
    "prefix": "cw",
    "body": ["console.warn($TM_SELECTED_TEXT$1);$0"],
    "description": "Log warning to the console"
  },
  "Log error to console": {
    "prefix": "ce",
    "body": ["console.error($TM_SELECTED_TEXT$1);$0"],
    "description": "Log error to the console"
  },
  "describe.it": {
    "body": [
      "describe('${1:Name of the group}', () => {\n",
      "\tit('${2:should }', () => {",
      "\t\texpect($TM_SELECTED_TEXT$3).toBe($0);",
      "\t});\n",
      "});"
    ],
    "description": "creates a describe-it test template",
    "prefix": "descit"
  },
  "it": {
    "body": "it('${1:should }', () => {\n\t$0\n});",
    "description": "creates an it block",
    "prefix": "it"
  },
  "toBe": {
    "body": "expect($TM_SELECTED_TEXT$1).toBe($2);$0",
    "description": "expects the first argument to be equal with the second one",
    "prefix": "tobe"
  }
}
