#!/bin/bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2020 Saurabh Charde <saurabhchardereal@gmail.com>
#

# Set clang version and android tag
CLANG_VER="r399163"
ANDROID_TAG="android-11.0.0_r3"

# Set compiler paths
COMPILER_PATH="$HOME/compiler"
CLANG_PATH="$COMPILER_PATH/clang/clang-${CLANG_VER}/bin"
GCC_PATH="$COMPILER_PATH/gcc/bin"
GCC_32_PATH="$COMPILER_PATH/gcc32/bin"

# Kernel specific
DEFCONFIG="X00T_defconfig"
ANYKERNEL=flasher
ZIMAGE=out/arch/arm64/boot/Image.gz-dtb
KERNEL_NAME="ARAGOTO"
ZIP_NAME="${KERNEL_NAME}-$(date +"%d%m%Y")-$(date +%H:%M).zip"

export KBUILD_BUILD_USER="SaurabhCharde"
export KBUILD_BUILD_HOST="ProjectWeeb"

# Colors
RST='\033[0m'
RED='\033[0;31m'
LGR='\033[1;32m'
YEL='\033[1;33m'
BLU='\033[1;34m'

# Clone compilers if does not exist
[[ ! -d $CLANG_PATH ]] &&
    git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 -b master $COMPILER_PATH/clang

[[ ! -d $GCC_PATH ]] &&
    git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b ${ANDROID_TAG} $COMPILER_PATH/gcc

[[ ! -d $GCC_32_PATH ]] &&
    git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b ${ANDROID_TAG} $COMPILER_PATH/gcc32

[[ ! -d $ANYKERNEL ]] &&
    git clone --depth=1 https://github.com/saurabhchardereal/AnyKernel3 -b ARAGOTO $ANYKERNEL

# Arguments
ARGS+="-j$(nproc --all) O=out \
	ARCH=arm64 \
	CC=$CLANG_PATH/clang \
	CLANG_TRIPLE=aarch64-linux-gnu- \
	CROSS_COMPILE=$GCC_PATH/aarch64-linux-android- \
	CROSS_COMPILE_ARM32=$GCC_32_PATH/arm-linux-androideabi- "

# Prints a formatted header to point out what is being done to the user
header() {
    BORDER="====$(for _ in $(seq ${#1}); do printf '='; done)===="
    printf '\n%b%s\n%s\n%s%b\n\n' "${2:-${LGR}}" "${BORDER}" "    ${1}    " "${BORDER}" "${RST}"
}

# Functions
makeClean() {
    header "Making Clean..."
    make $ARGS clean
    make $ARGS mrproper
    echo -e $BLU "Cleaned!" $RST
}

makeDefconfig() {
    header "Regenerating defconfig..."
    make $ARGS $DEFCONFIG
    mv out/.config arch/arm64/configs/X00T_defconfig
    echo -e $BLU "Renerating defconfig done!" $RST
}

makeKernel() {
    header "Building kernel..."
    make $ARGS $DEFCONFIG
    make $ARGS
    echo -e $BLU "Kernel image built!" $RST
}

makeZip() {
    # Fail build if previous command isn't a success
    if [ $? -ne 0 ]; then
        echo -e $RED "Build Failed!" $RST
    else
        header "Making Flashable Zip..."
        cp -f $ZIMAGE $ANYKERNEL
        cd $ANYKERNEL
        find . -name "*.zip" -type f -delete
        zip -r $ZIP_NAME *
    fi
    DURATION=$(($END - $START))
    echo -e $YEL "Build completed in $(($DURATION / 60)) mins and $(($DURATION % 60)) secs" $RST
}

# Add built parameters
while ((${#})); do
    case ${1} in
    -r | --regendef)
        makeDefconfig
        ;;

    -c | --clean)
        makeClean
        ;;
    esac
    shift
done

# Build kernel
START=$(date +"%s")
makeKernel
END=$(date +"%s")
makeZip
